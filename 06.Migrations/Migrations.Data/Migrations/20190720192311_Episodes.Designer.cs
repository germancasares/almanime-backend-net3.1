// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Data;

namespace Migrations.Data.Migrations
{
    [DbContext(typeof(AlmanimeContext))]
    [Migration("20190720192311_Episodes")]
    partial class Episodes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Models.Anime", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CoverImageUrl");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("KitsuID");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PosterImageUrl");

                    b.Property<int>("Season");

                    b.Property<string>("Slug")
                        .IsRequired();

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("Status");

                    b.Property<string>("Synopsis");

                    b.HasKey("ID");

                    b.HasIndex("KitsuID")
                        .IsUnique();

                    b.ToTable("Animes");
                });

            modelBuilder.Entity("Domain.Models.Episode", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Aired");

                    b.Property<Guid>("AnimeID");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("Duration");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("Name");

                    b.Property<int>("Number");

                    b.HasKey("ID");

                    b.HasIndex("AnimeID");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("Domain.Models.Fansub", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Acronym");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("FullName");

                    b.Property<string>("LogoUrl");

                    b.Property<DateTime?>("ModificationDate");

                    b.HasKey("ID");

                    b.ToTable("Fansubs");
                });

            modelBuilder.Entity("Domain.Models.Membership", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("FansubID");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<int>("Role");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.HasIndex("FansubID", "UserID")
                        .IsUnique();

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("Domain.Models.Subtitle", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("EpisodeID");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<int>("Status");

                    b.HasKey("ID");

                    b.HasIndex("EpisodeID");

                    b.ToTable("Subtitles");
                });

            modelBuilder.Entity("Domain.Models.SubtitlePartial", b =>
                {
                    b.Property<Guid>("MembershipID");

                    b.Property<Guid>("SubtitleID");

                    b.Property<int>("Revision");

                    b.Property<DateTime>("RevisionDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("MembershipID", "SubtitleID");

                    b.HasIndex("SubtitleID");

                    b.ToTable("SubtitlePartials");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AvatarUrl");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("IdentityID");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("NickName");

                    b.HasKey("ID");

                    b.HasIndex("IdentityID")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.Episode", b =>
                {
                    b.HasOne("Domain.Models.Anime", "Anime")
                        .WithMany("Episodes")
                        .HasForeignKey("AnimeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Models.Membership", b =>
                {
                    b.HasOne("Domain.Models.Fansub", "Fansub")
                        .WithMany("Memberships")
                        .HasForeignKey("FansubID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Memberships")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Models.Subtitle", b =>
                {
                    b.HasOne("Domain.Models.Episode", "Episode")
                        .WithMany("Subtitles")
                        .HasForeignKey("EpisodeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Models.SubtitlePartial", b =>
                {
                    b.HasOne("Domain.Models.Membership", "Membership")
                        .WithMany("SubtitlePartials")
                        .HasForeignKey("MembershipID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.Subtitle", "Subtitle")
                        .WithMany("SubtitlePartials")
                        .HasForeignKey("SubtitleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
